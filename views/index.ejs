<%- include('partials/header.ejs') %>

<canvas id="bgCanvas"></canvas>

<div class="indexInfo">
  <div class="indexText">
    <h1 class="welcomeText">Welcome to Task Manager App</h1>
    <p class="welcomeTextSubtitle">Organize your tasks, stay productive, and manage everything in one place.</p>
  </div>

<div class="authBtns">
  <a id="loginBTN" href="/login">Login</a>
  <a id="registerBTN" href="/register">Signup</a>
</div>
      <a class="googleBTN" href="/auth/google">
        <svg width="18" height="18" viewBox="0 0 533.5 544.3">
          <path fill="#4285F4" d="M533.5 278.4c0-18.9-1.6-37.1-4.7-54.8H272v103.9h146.9c-6.3 33.9-25.2 62.7-53.9 82v68h87c50.9-46.8 80.5-115.8 80.5-199.1z"/>
          <path fill="#34A853" d="M272 544.3c72.7 0 133.6-24.2 178.2-65.5l-87-68c-24.2 16.3-55 25.9-91.2 25.9-70 0-129.3-47.3-150.5-111.1h-89.5v69.9c44.7 88.9 136.7 149.8 240 149.8z"/>
          <path fill="#FBBC05" d="M121.5 321.6c-10.7-31.9-10.7-66.1 0-98l-89.5-69.9c-39.6 77.9-39.6 170.3 0 248.2l89.5-80.3z"/>
          <path fill="#EA4335" d="M272 107.6c37.2-.6 72 13 98.5 37.6l73.8-73.8C405.5 29.8 344.6 0 272 0 168.7 0 76.7 60.9 32 149.8l89.5 69.9c21.2-63.8 80.5-111.1 150.5-111.1z"/>
        </svg>
        Sign in with Google
      </a>
</div>

<script>
  const canvas = document.getElementById('bgCanvas');
  const ctx = canvas.getContext('2d');
  let width = canvas.width = window.innerWidth;
  let height = canvas.height = window.innerHeight;

  const particles = [];
  const particleCount = 60;

  // Track mouse position
  let mouse = { x: null, y: null };
  window.addEventListener('mousemove', e => {
    mouse.x = e.clientX;
    mouse.y = e.clientY;
  });

  for (let i = 0; i < particleCount; i++) {
    particles.push({
      x: Math.random() * width,
      y: Math.random() * height,
      radius: Math.random() * 2 + 1,
      vx: (Math.random() - 0.5) * 0.5,
      vy: (Math.random() - 0.5) * 0.5
    });
  }

  function animate() {
    ctx.clearRect(0, 0, width, height);

    particles.forEach(p => {
      // Particle reaction to mouse
      if (mouse.x && mouse.y) {
        const dx = p.x - mouse.x;
        const dy = p.y - mouse.y;
        const dist = Math.sqrt(dx * dx + dy * dy);
        if (dist < 100) { // hover distance threshold
          const angle = Math.atan2(dy, dx);
          const force = (100 - dist) / 20;
          p.vx += Math.cos(angle) * force * 0.05;
          p.vy += Math.sin(angle) * force * 0.05;
        }
      }

      // Draw particle
      ctx.beginPath();
      ctx.arc(p.x, p.y, p.radius, 0, Math.PI * 2);
      ctx.fillStyle = 'rgba(33,33,33,0.6)';
      ctx.fill();

      // Move particle
      p.x += p.vx;
      p.y += p.vy;

      // Wrap around edges
      if (p.x > width) p.x = 0;
      if (p.x < 0) p.x = width;
      if (p.y > height) p.y = 0;
      if (p.y < 0) p.y = height;
    });

    // Draw lines between nearby particles
    for (let i = 0; i < particles.length; i++) {
      for (let j = i + 1; j < particles.length; j++) {
        const dx = particles[i].x - particles[j].x;
        const dy = particles[i].y - particles[j].y;
        const dist = Math.sqrt(dx * dx + dy * dy);
        if (dist < 100) {
          ctx.beginPath();
          ctx.strokeStyle = 'rgba(33,33,33,0.1)';
          ctx.moveTo(particles[i].x, particles[i].y);
          ctx.lineTo(particles[j].x, particles[j].y);
          ctx.stroke();
        }
      }
    }

    requestAnimationFrame(animate);
  }

  animate();

  window.addEventListener('resize', () => {
    width = canvas.width = window.innerWidth;
    height = canvas.height = window.innerHeight;
  });
</script>

<style>
  body, html {
    margin: 0;
    padding: 0;
    overflow-x: hidden;
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 30%, #dee2e6 60%, #ced4da 100%);
    font-family: 'Open Sans', sans-serif;
  }

  #bgCanvas {
    position: fixed;
    top: 0;
    left: 0;
    z-index: 0; /* behind content */
  }

  .indexInfo {
    position: relative;
    z-index: 1; /* above canvas */
    display: flex;
    flex-direction: column;
    align-items: center;
    margin-top: 120px; /* top gap */
    text-align: center;
  }

  .welcomeText { font-size: 3rem; margin-bottom: 20px; }
  .welcomeTextSubtitle { font-size: 1.3rem; margin-bottom: 30px; color: #555; }

  .authBtns { display: flex; gap: 20px; justify-content: center; margin-bottom: 20px; }
</style>


<%- include('partials/footer.ejs') %>
